---

- name: Generate device configuration in structured format (yaml).
  template:
    src: "evpn-fabric-{{ type }}-yml.j2"
    dest: '{{ root_dir }}/intended/structured_configs/{{ inventory_hostname }}.yml'
  delegate_to: localhost
  check_mode: no
  changed_when: False
  tags: [build, provision]

- name: Merge generated device configuration with custom_structured_configuration_ variables (yaml)
  template:
    src: base/custom_structured_configuration.j2
    dest: '{{ root_dir }}/intended/structured_configs/{{ inventory_hostname }}.yml'
  delegate_to: localhost
  changed_when: False
  tags: [build, provision]

- name: Include device structured configuration, that was previously generated.
  include_vars: '{{ root_dir }}/intended/structured_configs/{{ inventory_hostname }}.yml'
  delegate_to: localhost
  tags: [build, provision]

- name: Generate EVPN fabric documentation in Markdown Format.
  when: type is defined and fabric_name is defined and type == "spine" and spine.nodes | list | first == inventory_hostname #Only run for first spine per fabric
  template:
    src: documentation/dc-fabric-documentation.j2
    dest: '{{ root_dir }}/documentation/{{ fabric_name }}/{{ fabric_name }}.md'
  delegate_to: localhost
  run_once: false
  check_mode: no
  tags: [build, provision]

- name: Generate Leaf and Spine Point-To-Point Links summary in csv format.
  when: type is defined and fabric_name is defined and type == "spine" and spine.nodes | list | first == inventory_hostname #Only run for first spine per fabric
  template:
    src: documentation/dc-fabric-p2p-links.j2
    dest: '{{ root_dir }}/documentation/{{ fabric_name }}/{{ fabric_name }}-p2p-links.csv'
  delegate_to: localhost
  run_once: false
  check_mode: no
  tags: [build, provision]

- name: Generate Fabric Topology in csv format.
  when: type is defined and fabric_name is defined and type == "spine" and spine.nodes | list | first == inventory_hostname #Only run for first spine per fabric
  template:
    src: documentation/dc-fabric-topology.j2
    dest: '{{ root_dir }}/documentation/{{ fabric_name }}/{{ fabric_name }}-topology.csv'
  delegate_to: localhost
  run_once: false
  check_mode: no
  tags: [build, provision]

- name: Generate DC Topology in csv format.
  when: type is defined and dc_name is defined and type == "super-spine" and super_spine.nodes | list | first == inventory_hostname #Only run for first super-spine per dc
  template:
    src: documentation/dc-topology.j2
    dest: '{{ root_dir }}/documentation/{{ dc_name }}/{{ dc_name }}-topology.csv'
  delegate_to: localhost
  run_once: false
  check_mode: no
  tags: [build, provision]

- name: Generate Spine and Super-Spine Point-To-Point Links summary in csv format.
  when: type is defined and dc_name is defined and type == "super-spine" and super_spine.nodes | list | first == inventory_hostname #Only run for first super-spine per dc
  template:
    src: documentation/dc-p2p-links.j2
    dest: '{{ root_dir }}/documentation/{{ dc_name }}/{{ dc_name }}-p2p-links.csv'
  delegate_to: localhost
  run_once: false
  check_mode: no
  tags: [build, provision]

- name: Generate EVPN Spine-to-Super-Spine fabric documentation in Markdown Format.
  when: type is defined and dc_name is defined and type == "super-spine" and super_spine.nodes | list | first == inventory_hostname #Only run for first super-spine per dc
  template:
    src: documentation/dc-documentation.j2
    dest: '{{ root_dir }}/documentation/{{ dc_name }}/{{ dc_name }}.md'
  delegate_to: localhost
  run_once: false
  check_mode: no
  tags: [build, provision]